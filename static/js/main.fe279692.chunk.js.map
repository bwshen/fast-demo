{"version":3,"sources":["enums/enums.tsx","logo.svg","MovieAutoComplete.tsx","CardsList.tsx","PlayListManager.tsx","PlayList.tsx","App.js","gen/api/base.ts","gen/api/common.ts","gen/api/api.ts","gen/api/configuration.ts","api.tsx","reportWebVitals.js","index.js"],"names":["CardType","MovieAutocomplete","props","state","searchTerm","results","handleInput","bind","e","target","value","this","length","searchedValue","API","search","then","setState","data","Search","Grid","container","Autocomplete","sx","flexGrow","marginRight","onChange","event","newValue","id","showTitle","showSearch","freeSolo","options","map","result","label","Title","imdbID","renderInput","params","TextField","onKeyUp","onInput","Button","variant","onClick","React","Component","CardsList","cards","type","prevProps","movies","page","SingleFull","showId","ListShort","getId","Response","console","log","key","term","Stack","direction","justifyContent","alignItems","spacing","pt","Card","maxWidth","CardHeader","title","subheader","Year","Type","item","xs","CardMedia","component","width","height","image","Poster","Plot","Director","Divider","Writer","Actors","Box","display","gridTemplateColumns","gridGap","justifyItems","className","pl","pb","IconButton","addToQueue","renderFullCard","renderShortCard","PlayListManager","_API","_playLists","_listeners","triggerChanges","sym","callback","hasOwnProperty","Object","getOwnPropertyNames","name","playListItems","getCurrentPlaylist","getOwnPropertySymbols","forEach","symbol","PlayList","changeBackgroundColor","backgroundColor","_playListSymbol","Symbol","addListener","list","removeListener","minHeight","maxHeight","role","removeFromCurrentPlayList","Typography","fontStyle","color","AppBar","position","bottom","Container","Toolbar","NativeSelect","App","playListManager","addToCurrentPlayList","toggleDrawer","isDrawerOpen","prev","next","flexDirection","overflowY","pr","BottomNavigation","showLabels","BottomNavigationAction","icon","Drawer","anchor","open","onClose","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","RequiredError","field","msg","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setApiKeyToObject","object","keyParamName","a","apiKey","localVarApiKeyValue","setSearchParams","url","searchParams","URLSearchParams","objects","Array","isArray","delete","append","set","toString","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","request","IDParameterApiFp","localVarAxiosParamCreator","i","plot","r","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","IDParameterApiAxiosParamCreator","localVarAxiosArgs","IDParameterApi","SearchParameterApiFp","titleSearch","s","y","SearchParameterApiAxiosParamCreator","SearchParameterApi","TitleParameterApiFp","getTitle","t","TitleParameterApiAxiosParamCreator","TitleParameterApi","Configuration","param","username","password","accessToken","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","_titleAPI","_searchAPI","_IDAPI","config","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Props","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe279692.chunk.js","sourcesContent":["export enum CardType {\r\n  SingleFull,\r\n  ListShort,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nexport default class MovieAutocomplete extends React.Component<{\r\n  API: API,\r\n  showTitle: (a: string) => void,\r\n  showSearch: (a: string) => void\r\n}, {\r\n  results: []\r\n}> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchTerm: '',\r\n      results: [],\r\n    };\r\n    this.handleInput = this.handleInput.bind(this);\r\n  }\r\n\r\n  handleInput(e: React.SyntheticEvent) {\r\n    if (e.target.value === this.state.searchTerm) return;\r\n    this.state.searchTerm = e.target.value;\r\n    if (this.state.searchTerm.length <= 2) return;\r\n    const searchedValue = this.state.searchTerm;\r\n    this.props.API.search(searchedValue).then((function(results){\r\n      if (searchedValue !== this.state.searchTerm) return;\r\n      this.setState({\r\n        results: results.data?.Search ? results.data?.Search : []\r\n      });\r\n    }).bind(this));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid container>\r\n          <Autocomplete\r\n            sx={{ flexGrow: 1, marginRight: '4px' }}\r\n            onChange={(event, newValue) => {\r\n              newValue?.id ? this.props.showTitle(newValue.id) : this.props.showSearch(this.state.searchTerm);\r\n            }}\r\n            freeSolo\r\n            options={this.state.results.map(result => ({label: result.Title, id: result.imdbID}))}\r\n            renderInput={(params) => <TextField {...params} value={this.state.searchTerm} onKeyUp={this.handleInput} onInput={this.handleInput} label=\"Search Openmdb\" />}\r\n          />\r\n        <Button variant=\"contained\" onClick={() => {this.props.showSearch(this.state.searchTerm)}}>Search</Button>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Stack from '@mui/material/Stack';\r\nimport {CardType} from './enums/enums';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Divider from '@mui/material/Divider';\r\nimport Grid from '@mui/material/Grid';\r\nimport ImageList from '@mui/material/ImageList';\r\nimport ImageListItem from '@mui/material/ImageListItem';\r\nimport AddToQueueIcon from '@mui/icons-material/AddToQueue';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nexport default class CardsList extends React.Component<{\r\n  API: API,\r\n  movies: {type: CardType, id: string, page: number}\r\n}, {}> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        cards: {\r\n          type: null,\r\n          results: []\r\n        }\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n     if (this.props.movies?.type === prevProps.movies?.type && this.props.movies?.id === prevProps.movies?.id && this.props.movies?.page ===  prevProps.movies?.page) return;\r\n     if (this.props.movies?.type === CardType.SingleFull) this.showId(this.props.movies.id);\r\n     if (this.props.movies?.type === CardType.ListShort) this.search(this.props.movies.id);\r\n  }\r\n\r\n  showId(imdbID: string) {\r\n    this.props.API.getId(imdbID).then(results => {\r\n      // Add in error handling later\r\n      if (results?.data?.Response !== 'True') return;\r\n      console.log({key: results.data.imdbID, ...results.data});\r\n      this.setState({cards: {type: CardType.SingleFull, results: [results.data]}});\r\n    })\r\n  }\r\n\r\n  search(term: string) {\r\n    const page = this.props.movies?.page;\r\n    console.log(page);\r\n    this.props.API.search(term, page).then((function(results){\r\n      if (this.props.movies?.type !== CardType.ListShort || term !== this.props.movies?.id || !results.data?.Search || page != this.props.movies?.page) return;\r\n      this.setState({cards: {type: CardType.ListShort, results: results.data?.Search}});\r\n    }).bind(this));\r\n  }\r\n\r\n  renderFullCard() {\r\n      const result = this.state.cards.results[0];\r\n      return (\r\n        <Stack\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n        pt={1}\r\n        >\r\n        <Card key={result.imdbID} sx={{maxWidth: '900px'}}>\r\n          <CardHeader\r\n            title={result.Title}\r\n            subheader={`(${result.Year}) (${result.Type})`}\r\n          />\r\n          <Grid container>\r\n            <Grid item xs={4}>\r\n              <CardMedia\r\n                component=\"img\"\r\n                width=\"300\"\r\n                height=\"458\"\r\n                image={result.Poster}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              {result.Plot}\r\n              {result.Director && result.Director !== 'N/A' && <div><Divider variant=\"middle\" />Director: {result.Director}</div>}\r\n              {result.Writer && result.Writer !== 'N/A' && <div><Divider variant=\"middle\" />Writer: {result.Writer}</div>}\r\n              {result.Actors && result.Actors !== 'N/A' && <div><Divider variant=\"middle\" />Actors: {result.Actors}</div>}\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n        </Stack>\r\n      );\r\n  }\r\n\r\n  renderShortCard() {\r\n    return (\r\n      <Box sx={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gridGap: '0.5em', alignItems: 'center', justifyItems: 'center', pt: 1}}>\r\n      { this.state.cards.results.map((result) => (\r\n      <Card key={result.imdbID} sx={{width: '250px'}}>\r\n        <Grid container>\r\n          <Grid item xs={4}>\r\n            <CardMedia\r\n              component=\"img\"\r\n              width=\"300\"\r\n              image={result.Poster}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <span className=\"bold\">{result.Title}</span><br />\r\n          <span className=\"italicized\">{`(${result.Year}) (${result.Type})`}</span>\r\n          <Box sx={{ display: 'flex', justifyContent: 'end', pl: 1, pb: 1 }}>\r\n            <IconButton aria-label=\"Add to Playlist\" onClick={() => this.props.addToQueue(result.imdbID)}>\r\n              <AddToQueueIcon sx={{ height: 38, width: 38 }} />\r\n            </IconButton>\r\n          </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    ))}\r\n    </Box>\r\n  );\r\n  }\r\n\r\n  render() {\r\n        switch(this.state.cards.type) {\r\n          case CardType.SingleFull:\r\n             return this.renderFullCard();\r\n            break;\r\n          case CardType.ListShort:\r\n            return this.renderShortCard();\r\n            break;\r\n          default:\r\n            return '';\r\n            break;\r\n        }\r\n  }\r\n}\r\n","\r\n\r\nexport class PlayListManager {\r\n  private _API: API;\r\n  private _playLists: [];\r\n\r\n  constructor(API: API){\r\n    this._API = API;\r\n    //We'll stick with a single one for now.\r\n    this._playLists = [{}];\r\n    this._listeners = {};\r\n  }\r\n\r\n  addToCurrentPlayList(imdbID) {\r\n    this._API.getId(imdbID,'short').then(results => {\r\n      // Add in error handling later\r\n      if (results?.data?.Response !== 'True' || this._playLists[0][results.data.imdbID]) return;\r\n      this._playLists[0][results.data.imdbID] = results.data;\r\n      this.triggerChanges();\r\n    })\r\n  }\r\n\r\n  removeFromCurrentPlayList(imdbID) {\r\n    if (!this._playLists[0][imdbID]) return;\r\n    delete this._playLists[0][imdbID];\r\n    this.triggerChanges();\r\n  }\r\n\r\n  addListener(sym, callback) {\r\n    this._listeners[sym] = callback;\r\n  }\r\n\r\n  removeListener(sym) {\r\n    if (this._listeners.hasOwnProperty(sym)) delete this._listeners[sym];\r\n  }\r\n\r\n  getCurrentPlaylist() {\r\n    return Object.getOwnPropertyNames(this._playLists[0]).map(name => this._playLists[0][name]);\r\n  }\r\n\r\n  triggerChanges() {\r\n    const playListItems = this.getCurrentPlaylist();\r\n    Object.getOwnPropertySymbols(this._listeners).forEach(symbol => {\r\n        try {\r\n          this._listeners[symbol](playListItems);\r\n        } catch (e){\r\n          console.log('wtf', e);\r\n        }\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Stack from '@mui/material/Stack';\r\nimport {CardType} from './enums/enums';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Divider from '@mui/material/Divider';\r\nimport Grid from '@mui/material/Grid';\r\nimport ImageList from '@mui/material/ImageList';\r\nimport ImageListItem from '@mui/material/ImageListItem';\r\nimport RemoveFromQueueIcon from '@mui/icons-material/RemoveFromQueue';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Container from '@mui/material/Container';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport NativeSelect from '@mui/material/NativeSelect';\r\n\r\nexport default class PlayList extends React.Component<{\r\n  PlayListManager: PlayListManager\r\n}, {}> {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(props);\r\n    this.state = {\r\n        movies: [],\r\n        backgroundColor: 'white'\r\n    };\r\n    this._playListSymbol = Symbol();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({movies: this.props.PlayListManager.getCurrentPlaylist()});\r\n    this.props.PlayListManager.addListener(this._playListSymbol, (list) => {\r\n      this.setState({movies: list});\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.PlayListManager.removeListener(this._playListSymbol);\r\n  }\r\n\r\n  changeBackgroundColor = (e) => {\r\n    this.setState({backgroundColor: e.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box sx={{ width: 'auto', minHeight: '60vh', maxHeight: '80vh', pb: 1, pt: 2, backgroundColor: this.state.backgroundColor}}\r\n          role=\"presentation\"\r\n        >\r\n      <Box sx={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gridGap: '0.5em', alignItems: 'center', justifyItems: 'center'}}>\r\n      { this.state.movies.map((result) => (\r\n      <Card key={result.imdbID} sx={{width: '250px'}}>\r\n        <Grid container>\r\n          <Grid item xs={4}>\r\n            <CardMedia\r\n              component=\"img\"\r\n              width=\"300\"\r\n              image={result.Poster}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <span className=\"bold\">{result.Title}</span><br />\r\n          <span className=\"italicized\">{`(${result.Year}) (${result.Type})`}</span>\r\n          <Box sx={{ display: 'flex', justifyContent: 'end', pl: 1, pb: 1 }}>\r\n            <IconButton aria-label=\"Remove from Playlist\" onClick={() => this.props.PlayListManager.removeFromCurrentPlayList(result.imdbID)}>\r\n              <RemoveFromQueueIcon sx={{ height: 38, width: 38 }} />\r\n            </IconButton>\r\n          </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    ))}\r\n    { this.state.movies.length === 0 &&\r\n      <Typography sx={{fontStyle: 'italicized', color: '#AAA'}}>Your Playlist is empty</Typography>\r\n    }\r\n    </Box>\r\n    <Box sx={{height: '4em'}}></Box>\r\n    <AppBar position=\"static\" color=\"primary\" sx={{position: 'fixed', bottom: 0, width: '100vw', height: '4em'}}>\r\n      <Container maxWidth=\"md\">\r\n        <Toolbar>\r\n          My favorite color is\r\n          <NativeSelect value={this.state.backgroundColor} id=\"playlist_color\" onChange={this.changeBackgroundColor}>\r\n            <option value=\"white\">White</option>\r\n            <option value=\"blue\">Blue</option>\r\n            <option value=\"red\">Red</option>\r\n            <option value=\"green\">Green</option>\r\n          </NativeSelect>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n    </Box>\r\n  );\r\n  }\r\n}\r\n","import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { styled } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport MuiAccordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport Drawer from '@mui/material/Drawer';\nimport Typography from '@mui/material/Typography';\nimport PlaylistAddCheck from '@mui/icons-material/PlaylistAddCheck';\nimport ArrowBackIosNew from '@mui/icons-material/ArrowBackIosNew';\nimport ArrowForwardIos from '@mui/icons-material/ArrowForwardIos';\nimport AppBar from '@mui/material/AppBar';\nimport MovieAutocomplete from './MovieAutoComplete';\nimport CardsList from './CardsList';\nimport {CardType} from './enums/enums';\nimport {PlayListManager} from './PlayListManager';\nimport PlayList from './PlayList';\nimport BottomNavigation from '@mui/material/BottomNavigation';\nimport BottomNavigationAction from '@mui/material/BottomNavigationAction';\n\nexport default class App extends React.Component<{\n  API: API\n}, {\n  cards: any,\n}> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: null,\n      isDrawerOpen: false,\n    }\n    this.playListManager = new PlayListManager(props.API);\n  }\n\n  showTitle = (imdbID: string) => {\n    this.setState({cards: {type: CardType.SingleFull, id: imdbID }});\n  }\n\n  showSearch = (term: string) => {\n    this.setState({cards: {type: CardType.ListShort, id: term, page: 0 }});\n  }\n\n  addToQueue = (imdbID: string) => {\n    this.playListManager.addToCurrentPlayList(imdbID);\n  }\n\n  toggleDrawer = (isDrawerOpen) => (e) => {\n    if (e.type === 'keydown' && (e.key === 'Tab' || e.key === 'Shift')) return;\n    this.setState({isDrawerOpen});\n  };\n\n  prev = () => {\n    if (this.state.cards?.page) this.setState({cards: {...this.state.cards, page: this.state.cards.page - 1}});\n  }\n\n  next = () => {\n    console.log(this.state.cards?.page);\n    // undefined is not >= 0 (fix this later)\n    if (this.state.cards?.page >= 0) this.setState({cards: {...this.state.cards, page: this.state.cards.page + 1}});\n  }\n\n  render() {\n    return (\n      <div className=\"fast-movie-app\">\n      <AppBar position=\"static\">\n        <Typography variant=\"h6\" component=\"div\">\n          Fast Movie Demo App\n        </Typography>\n      </AppBar>\n      <Box sx={{display: 'flex', flexDirection: 'column', height: '100%', overflowY: 'auto', pt: 2, pl: 2, pr: 2, pb: 1}}>\n        <MovieAutocomplete\n          API={this.props.API}\n          showTitle={this.showTitle}\n          showSearch={this.showSearch}\n        />\n        <CardsList\n          API={this.props.API}\n          movies={this.state.cards}\n          addToQueue={this.addToQueue}\n        />\n      </Box>\n      <BottomNavigation showLabels>\n        <BottomNavigationAction onClick={this.prev} label=\"Prev\" icon={<ArrowBackIosNew />} />\n        <BottomNavigationAction onClick={this.toggleDrawer(true)} label=\"Playlist\" icon={<PlaylistAddCheck />} />\n        <BottomNavigationAction onClick={this.next} label=\"Next\" icon={<ArrowForwardIos />} />\n        </BottomNavigation>\n      <Drawer\n        anchor='bottom'\n        open={this.state.isDrawerOpen}\n        onClose={this.toggleDrawer(false)}\n      >\n      <PlayList PlayListManager={this.playListManager} />\n      </Drawer>\n      </div>\n    );\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * OMDb API\n * This API requires authorization, you can get a free key here: [http://omdbapi.com/apikey.aspx](http://omdbapi.com/apikey.aspx)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: bfritz@fadingsignal.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://omdbapi.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * OMDb API\n * This API requires authorization, you can get a free key here: [http://omdbapi.com/apikey.aspx](http://omdbapi.com/apikey.aspx)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: bfritz@fadingsignal.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * OMDb API\n * This API requires authorization, you can get a free key here: [http://omdbapi.com/apikey.aspx](http://omdbapi.com/apikey.aspx)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: bfritz@fadingsignal.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n\n/**\n * IDParameterApi - axios parameter creator\n * @export\n */\nexport const IDParameterApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Returns a single result based on the ID provided\n         * @param {string} i A valid IMDb ID (e.g. tt0000001)\n         * @param {'short' | 'full'} [plot] Return short or full plot\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getId: async (i: string, plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'i' is not null or undefined\n            assertParamExists('getId', 'i', i)\n            const localVarPath = `/?i`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKeyQueryParam required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (i !== undefined) {\n                localVarQueryParameter['i'] = i;\n            }\n\n            if (plot !== undefined) {\n                localVarQueryParameter['plot'] = plot;\n            }\n\n            if (r !== undefined) {\n                localVarQueryParameter['r'] = r;\n            }\n\n            if (callback !== undefined) {\n                localVarQueryParameter['callback'] = callback;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * IDParameterApi - functional programming interface\n * @export\n */\nexport const IDParameterApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = IDParameterApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Returns a single result based on the ID provided\n         * @param {string} i A valid IMDb ID (e.g. tt0000001)\n         * @param {'short' | 'full'} [plot] Return short or full plot\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getId(i: string, plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getId(i, plot, r, callback, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * IDParameterApi - factory interface\n * @export\n */\nexport const IDParameterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = IDParameterApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Returns a single result based on the ID provided\n         * @param {string} i A valid IMDb ID (e.g. tt0000001)\n         * @param {'short' | 'full'} [plot] Return short or full plot\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getId(i: string, plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any): AxiosPromise<void> {\n            return localVarFp.getId(i, plot, r, callback, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * IDParameterApi - object-oriented interface\n * @export\n * @class IDParameterApi\n * @extends {BaseAPI}\n */\nexport class IDParameterApi extends BaseAPI {\n    /**\n     * \n     * @summary Returns a single result based on the ID provided\n     * @param {string} i A valid IMDb ID (e.g. tt0000001)\n     * @param {'short' | 'full'} [plot] Return short or full plot\n     * @param {'json' | 'xml'} [r] The response type to return\n     * @param {string} [callback] JSONP callback name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDParameterApi\n     */\n    public getId(i: string, plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any) {\n        return IDParameterApiFp(this.configuration).getId(i, plot, r, callback, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SearchParameterApi - axios parameter creator\n * @export\n */\nexport const SearchParameterApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Returns an array of results for a given title\n         * @param {string} s Title of movie or series\n         * @param {number} [y] Year of release\n         * @param {'movie' | 'series'} [type] Return movie or series\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {number} [page] Page number to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        titleSearch: async (s: string, y?: number, type?: 'movie' | 'series', r?: 'json' | 'xml', page?: number, callback?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 's' is not null or undefined\n            assertParamExists('titleSearch', 's', s)\n            const localVarPath = `/?s`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKeyQueryParam required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (s !== undefined) {\n                localVarQueryParameter['s'] = s;\n            }\n\n            if (y !== undefined) {\n                localVarQueryParameter['y'] = y;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (r !== undefined) {\n                localVarQueryParameter['r'] = r;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (callback !== undefined) {\n                localVarQueryParameter['callback'] = callback;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SearchParameterApi - functional programming interface\n * @export\n */\nexport const SearchParameterApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SearchParameterApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Returns an array of results for a given title\n         * @param {string} s Title of movie or series\n         * @param {number} [y] Year of release\n         * @param {'movie' | 'series'} [type] Return movie or series\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {number} [page] Page number to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async titleSearch(s: string, y?: number, type?: 'movie' | 'series', r?: 'json' | 'xml', page?: number, callback?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.titleSearch(s, y, type, r, page, callback, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SearchParameterApi - factory interface\n * @export\n */\nexport const SearchParameterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SearchParameterApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Returns an array of results for a given title\n         * @param {string} s Title of movie or series\n         * @param {number} [y] Year of release\n         * @param {'movie' | 'series'} [type] Return movie or series\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {number} [page] Page number to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        titleSearch(s: string, y?: number, type?: 'movie' | 'series', r?: 'json' | 'xml', page?: number, callback?: string, options?: any): AxiosPromise<void> {\n            return localVarFp.titleSearch(s, y, type, r, page, callback, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SearchParameterApi - object-oriented interface\n * @export\n * @class SearchParameterApi\n * @extends {BaseAPI}\n */\nexport class SearchParameterApi extends BaseAPI {\n    /**\n     * \n     * @summary Returns an array of results for a given title\n     * @param {string} s Title of movie or series\n     * @param {number} [y] Year of release\n     * @param {'movie' | 'series'} [type] Return movie or series\n     * @param {'json' | 'xml'} [r] The response type to return\n     * @param {number} [page] Page number to return\n     * @param {string} [callback] JSONP callback name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SearchParameterApi\n     */\n    public titleSearch(s: string, y?: number, type?: 'movie' | 'series', r?: 'json' | 'xml', page?: number, callback?: string, options?: any) {\n        return SearchParameterApiFp(this.configuration).titleSearch(s, y, type, r, page, callback, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * TitleParameterApi - axios parameter creator\n * @export\n */\nexport const TitleParameterApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Returns the most popular match for a given title\n         * @param {string} t Title of movie or series\n         * @param {number} [y] Year of release\n         * @param {'movie' | 'series'} [type] Return movie or series\n         * @param {'short' | 'full'} [plot] Return short or full plot\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTitle: async (t: string, y?: number, type?: 'movie' | 'series', plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 't' is not null or undefined\n            assertParamExists('getTitle', 't', t)\n            const localVarPath = `/?t`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication APIKeyQueryParam required\n            await setApiKeyToObject(localVarQueryParameter, \"apikey\", configuration)\n\n            if (t !== undefined) {\n                localVarQueryParameter['t'] = t;\n            }\n\n            if (y !== undefined) {\n                localVarQueryParameter['y'] = y;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (plot !== undefined) {\n                localVarQueryParameter['plot'] = plot;\n            }\n\n            if (r !== undefined) {\n                localVarQueryParameter['r'] = r;\n            }\n\n            if (callback !== undefined) {\n                localVarQueryParameter['callback'] = callback;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * TitleParameterApi - functional programming interface\n * @export\n */\nexport const TitleParameterApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = TitleParameterApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Returns the most popular match for a given title\n         * @param {string} t Title of movie or series\n         * @param {number} [y] Year of release\n         * @param {'movie' | 'series'} [type] Return movie or series\n         * @param {'short' | 'full'} [plot] Return short or full plot\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTitle(t: string, y?: number, type?: 'movie' | 'series', plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTitle(t, y, type, plot, r, callback, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * TitleParameterApi - factory interface\n * @export\n */\nexport const TitleParameterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = TitleParameterApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Returns the most popular match for a given title\n         * @param {string} t Title of movie or series\n         * @param {number} [y] Year of release\n         * @param {'movie' | 'series'} [type] Return movie or series\n         * @param {'short' | 'full'} [plot] Return short or full plot\n         * @param {'json' | 'xml'} [r] The response type to return\n         * @param {string} [callback] JSONP callback name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTitle(t: string, y?: number, type?: 'movie' | 'series', plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any): AxiosPromise<void> {\n            return localVarFp.getTitle(t, y, type, plot, r, callback, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * TitleParameterApi - object-oriented interface\n * @export\n * @class TitleParameterApi\n * @extends {BaseAPI}\n */\nexport class TitleParameterApi extends BaseAPI {\n    /**\n     * \n     * @summary Returns the most popular match for a given title\n     * @param {string} t Title of movie or series\n     * @param {number} [y] Year of release\n     * @param {'movie' | 'series'} [type] Return movie or series\n     * @param {'short' | 'full'} [plot] Return short or full plot\n     * @param {'json' | 'xml'} [r] The response type to return\n     * @param {string} [callback] JSONP callback name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TitleParameterApi\n     */\n    public getTitle(t: string, y?: number, type?: 'movie' | 'series', plot?: 'short' | 'full', r?: 'json' | 'xml', callback?: string, options?: any) {\n        return TitleParameterApiFp(this.configuration).getTitle(t, y, type, plot, r, callback, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * OMDb API\n * This API requires authorization, you can get a free key here: [http://omdbapi.com/apikey.aspx](http://omdbapi.com/apikey.aspx)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: bfritz@fadingsignal.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import axios from 'axios';\r\nimport {TitleParameterApi, SearchParameterApi, IDParameterApi, Configuration} from './gen/api/index.ts';\r\n\r\nexport class API {\r\n  private _titleAPI: TitleParameterApi;\r\n  private _searchAPI: SearchParameterApi;\r\n  private _IDAPI: IDParameterApi;\r\n\r\n\r\n  constructor(apiKey: string) {\r\n    const config = new Configuration({apiKey});\r\n    this._titleAPI = new TitleParameterApi(config);\r\n    this._searchAPI = new SearchParameterApi(config);\r\n    this._IDAPI = new IDParameterApi(config);\r\n  }\r\n\r\n  search(term: string, page = 0): AxiosPromise {\r\n    //API does not use 0 offset\r\n    return this._searchAPI.titleSearch(term, undefined, undefined, undefined, page+1);\r\n  }\r\n\r\n  getId(imdbID: string, plot: 'short' | 'full' = 'full'): AxiosPromise {\r\n    return this._IDAPI.getId(imdbID, plot);\r\n  }\r\n}\r\n\r\nexport default API;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport API from './api';\nimport reportWebVitals from './reportWebVitals';\n\nconst Props = {\n    API: new API('c2768b7e')\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App API={Props.API} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}